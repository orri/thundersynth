/** 
*  @file channel.c
*  @author Orri TÃ³masson
*/


//#include <math.h>
#include <stdlib.h>
#include <string.h>

#include "channel.h"


#define dprintf if(0)printf

/** @brief creates one period of a sine wave
    @param length of the sine period in samples
*/
/*void sine_period(u8 *period, u16 period_len){
  u16 i;
  for (i=0; i < period_len; i++)
    period[i] = round(128+127*sin(i*2*M_PI/period_len));
    };*/

void square_period(u8 *period, u16 period_len){
  u16 i;
  for (i=0; i <period_len/2; i++)
    period[i] = 0;
  for (i=period_len/2; i<period_len; i++)
    period[i] = 255;
}
void square_period_duty(u8 *period, u16 period_len, u8 duty)
{
  u16 i, breakpoint;
  breakpoint = period_len*duty>>8; // duty is in Q0.8
  for (i=0; i < breakpoint; i++)
    period[i] = 0;
  for (i=breakpoint; i<period_len; i++)
    period[i] = 255;
} 

/** @brief creates one period of a trig wave
*   @param length of the sine period in samples
*/
void trig_period(u8 *period, u16 period_len){
   
  u16 i;
  u16 half_period_len = (period_len >> 1);
  u8 *sa = period;
  
  // up flank
  for (i=0; i < half_period_len; i++)
    *(sa++) = 255 * i/ (half_period_len);
    
  // create down flank
  // period_len - half_period_len is to deal with odd period_len
  for (i= 0; i < period_len - half_period_len; i++) 
    *(sa++) = 255 -  (255 * i/ (period_len-half_period_len));
};

void random_period(u8 *period, u16 period_len){
  u16 i;
  srandom(0);
  printf("calling random period\n");
  for (i = 0; i < period_len; i++)
    period[i] = (u8)random();
  
}







inline u8 scale_amplitude(u8 in, u8 scale){
  u8 amp = in - 128; // 128 is the "zero" in unsigned 8 bit format
  amp = ((((s8)amp*scale))>>8)+128; // scale is in Q0.8

  return amp;
}



inline void initialize_line(linealg* l, u16 period_len)
{
  l->deltax = period_len;
  l->error  = period_len / 2;
  l->ystep  = (period_len + DELTAY -1) / period_len;
  l->deltay = DELTAY % period_len;
  // l->y  y is unchanged but must be initialized (to any value less than DELTAY)
  // 1 addition  (assuming compiler will compute DELTAY-1 )
  // 1 integer division
  // 1 intiger modulo
  // no data dependenc
}

inline u16 next_line_val(linealg* l)
{
  u16 result = l->y;
  l->error  -= l->deltay;
  if (l->error < 0){
    l->error += l->deltax;
    l->y     += l->ystep;
  } 
  else
    l->y += l->ystep - 1;
  l->y &= 0x1ff; // wrap
  return result;
  
  // 2 or 3 additions and one branch
  // or 4 additions if predication is used
  // has data dependencies 
}

inline u8 next_sine_sample(step_osc *osc){
  return SINE_TABLE[next_line_val(osc->la)];
}

// sine, trig, saw
inline void new_per(step_osc *osc, u16 period_len){
  initialize_line(osc->la, period_len);
  osc->period_len = period_len;
}

inline void new_square_per(step_osc *osc,  u16 period_len, u8 duty){
  u16 phase = ((u32)osc->per_count<<8)/osc->period_len; 
  // phase a hex percentage (Q8.8 never bigger than 1.0)
  // per_count is always smaller than (old) period_len 
  // maximum value for pahse is 0x100;
  osc->per_count = phase*period_len >> 8;
  osc->cut_point = period_len*duty >> 8; // duty is Q0.8
  osc->period_len = period_len;
}

inline u8 next_square_sample(step_osc *osc){
  u8 result = 0x40;
  if (osc->per_count > osc->cut_point)
    result = 0xc0;
  osc->per_count = (osc->per_count+1) % osc->period_len;
  return result;
}

inline u8 next_trig_sample(step_osc *osc){
  u16 val = next_line_val(osc->la);
  u8 val8 = (u8)val; // msb ignored

  if (val&0x100) // if msb is set then down flank
    return  0xff - val8;
  else 
    return val8;

  // trig wave is crated by taking a straight line 
  // of length period and height which is 2x p2p (val2 = val << 1).
  // (p2p is 0xff and the line alg gives a line of height 512)
  // when the y value of the line is in the upper half (val&0x100) 
  // the other 8 bits are subtracted from 0xff
  // to create the down flank.
}
      


inline u8 next_saw_sample(step_osc *osc){
  //  osc->period_len = period_len;
  return next_line_val(osc->la) >> 1;
}


inline u8 adsr_sample(adsr *a, adsr_params *ap, u8 sample){
  // find next ADSR value and phase
  u8 scale;
  u16 decay_ampl;
 
  switch(a->phase){
  case ATTACK:
    a->amp_scale += ap->attack_coeff;// (a->amp_scale*a->attack_coeff)>>15; // Q0.16 = Q0.16*Q1.15
    scale = a->amp_scale >> 8; 
    if (scale > ap->attack_level)
      a->phase = DECAY;    
    break;

  case DECAY:
    decay_ampl = a->amp_scale - (ap->sustain_level<<8);
    decay_ampl = decay_ampl*ap->decay_coeff >> 15;
    a->amp_scale = decay_ampl + (ap->sustain_level<<8);
    scale = a->amp_scale >> 8;
    if (scale < ap->sustain_level+1)
      a->phase = SUSTAIN;
    break;
  case SUSTAIN:
    a->amp_scale = ap->sustain_level << 8;
    scale = ap->sustain_level;
    // stay in this phase until note is released
    break;
  case RELEASE:
    a->amp_scale = (a->amp_scale*ap->release_coeff)>>15; // Q0.16 = Q0.16*Q1.15
    scale = a->amp_scale >> 8; 
    break;
  case REST:
    a->amp_scale = 0x0;
    scale = 0;
  }
  if(a->phase == ATTACK && (a->amp_scale == a->prev_ampscale))
    a->amp_scale++;
  a->prev_ampscale = a->amp_scale;
  
  return scale_amplitude(sample, scale);

}

// translates adsr into a priority value to release
inline u16 adsr_val(adsr* a)
{
  u16 phase_val = (5- a->phase) << 8;
  u16 amp_val = a->amp_scale >> 8;

  return (phase_val + amp_val);
}

inline u8 get_osc_num(channel *c){
  u16 i, osc_val;
  u8 min_num = 0;
  u16 min_val = 0xffff;
  for (i = 0; i < c->num_osc; i++){
    osc_val = adsr_val(c->adsr[i]);

    if (c->last_osc == i)
      osc_val++;


    if (osc_val < min_val){
      min_val = osc_val;
      min_num = i;
    }
  } 
  
  c->last_osc = min_num;

  return min_num;
}


void note_press(channel *c, u8 key_val, u8 velocity ){
  u8 osc_num = get_osc_num(c);
  switch (c->wavetype){
  case TRIG:
  case SINE:
  case SAW:
    new_per(c->osc[osc_num], notesperiod[key_val - 0x24]);
    break;
  case SQUARE:
    new_square_per(c->osc[osc_num], notesperiod[key_val - 0x24], c->duty_cycle);
    break;
  }
  c->adsr[osc_num]->phase = ATTACK;
  if (c->adsr[osc_num]->amp_scale < 0x100)
    c->adsr[osc_num]->amp_scale = 0x100;
  
}

void note_release(channel *c, u8 key_val ){
  u8 i;
  for (i=0; i<c->num_osc; i++){
    if ( c->osc[i]->period_len == notesperiod[key_val - 0x24]){
      c->adsr[i]->phase = RELEASE;
    }
  }
  
}

inline u8 next_channel_sample(channel *c){
  u8 result, i;
  u8 osc_samples[8]; // assume never more than 8 oscillators
  result = 0;
  switch (c->wavetype){
  case TRIG:
    for (i = 0; i < c->num_osc; i++)
      osc_samples[i] = next_trig_sample(c->osc[i]);
    break;
  case SINE:
    for (i = 0; i < c->num_osc; i++)
      osc_samples[i] = next_sine_sample(c->osc[i]);
    break;
  case SQUARE:
    for (i = 0; i < c->num_osc; i++)
      osc_samples[i] = next_square_sample(c->osc[i]);
    break;
  case SAW:
    for (i = 0; i < c->num_osc; i++)
      osc_samples[i] = next_saw_sample(c->osc[i]);
    break;
  }
  
  for (i = 0; i < c->num_osc; i++){
    osc_samples[i] = adsr_sample(c->adsr[i], c->ap, osc_samples[i]);
    result +=  osc_samples[i]>>3;
  }

  return result;
  
}

const u16 notes[84] = { 65, 69, 73, 78, 82, 87, 92, 98, 104, 110, 117, 123, 131, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 247, 262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988, 1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 1661, 1760, 1865, 1976, 2093, 2217, 2349, 2489, 2637, 2794, 2960, 3136, 3322, 3520, 3729, 3951, 4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902};

const u16 notesperiod[84] = {678,  639,  604,  565,  538,  507,  479,  450,  424,  401,  377,  359, 337,  317,  300,  283,  267,  252,  238,  225,  212,  200,  189,  179,  168,  159,  150,  142,  134,  126,  119,  113,  106,  100,  95,  89,  84,  80,  75,  71,  67,  63,  60,  56,  53,  50,  47,  45,  42,  40,  38,  35,  33,  32,  30,  28,  27,  25,  24,  22,  21,  20,  19,  18,  17,  16,  15,  14,  13,  13,  12,  11,  11,  10,  9,  9,  8,  8, 7,  7,  7,  6,  6,  6};

const u8 sine512[512] = {128, 129, 131, 132, 134, 135, 137, 138, 140, 142, 143, 145, 146, 148, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 167, 169, 170, 172, 173, 175, 176, 178, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 234, 235, 236, 237, 238, 238, 239, 240, 241, 241, 242, 243, 243, 244, 245, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 253, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 253, 253, 253, 253, 252, 252, 252, 251, 251, 250, 250, 250, 249, 249, 248, 248, 247, 246, 246, 245, 245, 244, 243, 243, 242, 241, 241, 240, 239, 238, 238, 237, 236, 235, 234, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 215, 214, 213, 212, 211, 210, 208, 207, 206, 205, 203, 202, 201, 200, 198, 197, 196, 194, 193, 192, 190, 189, 188, 186, 185, 183, 182, 181, 179, 178, 176, 175, 173, 172, 170, 169, 167, 166, 165, 163, 162, 160, 158, 157, 155, 154, 152, 151, 149, 148, 146, 145, 143, 142, 140, 138, 137, 135, 134, 132, 131, 129, 128, 126, 124, 123, 121, 120, 118, 117, 115, 113, 112, 110, 109, 107, 106, 104, 103, 101, 100, 98, 97, 95, 93, 92, 90, 89, 88, 86, 85, 83, 82, 80, 79, 77, 76, 74, 73, 72, 70, 69, 67, 66, 65, 63, 62, 61, 59, 58, 57, 55, 54, 53, 52, 50, 49, 48, 47, 45, 44, 43, 42, 41, 40, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 21, 20, 19, 18, 17, 17, 16, 15, 14, 14, 13, 12, 12, 11, 10, 10, 9, 9, 8, 7, 7, 6, 6, 5, 5, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 90, 92, 93, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 123, 124, 126};

const u8 sine1024[1024] = {128, 128, 129, 130, 131, 131, 132, 133, 134, 135, 135, 136, 137, 138, 138, 139, 140, 141, 142, 142, 143, 144, 145, 145, 146, 147, 148, 149, 149, 150, 151, 152, 152, 153, 154, 155, 155, 156, 157, 158, 158, 159, 160, 161, 162, 162, 163, 164, 165, 165, 166, 167, 167, 168, 169, 170, 170, 171, 172, 173, 173, 174, 175, 176, 176, 177, 178, 178, 179, 180, 181, 181, 182, 183, 183, 184, 185, 186, 186, 187, 188, 188, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198, 199, 200, 200, 201, 202, 202, 203, 203, 204, 205, 205, 206, 207, 207, 208, 208, 209, 210, 210, 211, 211, 212, 213, 213, 214, 214, 215, 215, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 234, 235, 235, 236, 236, 236, 237, 237, 238, 238, 238, 239, 239, 240, 240, 240, 241, 241, 241, 242, 242, 242, 243, 243, 243, 244, 244, 244, 245, 245, 245, 246, 246, 246, 246, 247, 247, 247, 248, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 249, 249, 249, 249, 248, 248, 248, 248, 247, 247, 247, 246, 246, 246, 246, 245, 245, 245, 244, 244, 244, 243, 243, 243, 242, 242, 242, 241, 241, 241, 240, 240, 240, 239, 239, 238, 238, 238, 237, 237, 236, 236, 236, 235, 235, 234, 234, 234, 233, 233, 232, 232, 231, 231, 230, 230, 229, 229, 228, 228, 228, 227, 227, 226, 226, 225, 225, 224, 224, 223, 222, 222, 221, 221, 220, 220, 219, 219, 218, 218, 217, 217, 216, 215, 215, 214, 214, 213, 213, 212, 211, 211, 210, 210, 209, 208, 208, 207, 207, 206, 205, 205, 204, 203, 203, 202, 202, 201, 200, 200, 199, 198, 198, 197, 196, 196, 195, 194, 194, 193, 192, 192, 191, 190, 190, 189, 188, 188, 187, 186, 186, 185, 184, 183, 183, 182, 181, 181, 180, 179, 178, 178, 177, 176, 176, 175, 174, 173, 173, 172, 171, 170, 170, 169, 168, 167, 167, 166, 165, 165, 164, 163, 162, 162, 161, 160, 159, 158, 158, 157, 156, 155, 155, 154, 153, 152, 152, 151, 150, 149, 149, 148, 147, 146, 145, 145, 144, 143, 142, 142, 141, 140, 139, 138, 138, 137, 136, 135, 135, 134, 133, 132, 131, 131, 130, 129, 128, 128, 127, 126, 125, 124, 124, 123, 122, 121, 120, 120, 119, 118, 117, 117, 116, 115, 114, 113, 113, 112, 111, 110, 110, 109, 108, 107, 106, 106, 105, 104, 103, 103, 102, 101, 100, 100, 99, 98, 97, 97, 96, 95, 94, 93, 93, 92, 91, 90, 90, 89, 88, 88, 87, 86, 85, 85, 84, 83, 82, 82, 81, 80, 79, 79, 78, 77, 77, 76, 75, 74, 74, 73, 72, 72, 71, 70, 69, 69, 68, 67, 67, 66, 65, 65, 64, 63, 63, 62, 61, 61, 60, 59, 59, 58, 57, 57, 56, 55, 55, 54, 53, 53, 52, 52, 51, 50, 50, 49, 48, 48, 47, 47, 46, 45, 45, 44, 44, 43, 42, 42, 41, 41, 40, 40, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 34, 33, 33, 32, 31, 31, 30, 30, 29, 29, 28, 28, 27, 27, 27, 26, 26, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 21, 20, 20, 19, 19, 19, 18, 18, 17, 17, 17, 16, 16, 15, 15, 15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 40, 40, 41, 41, 42, 42, 43, 44, 44, 45, 45, 46, 47, 47, 48, 48, 49, 50, 50, 51, 52, 52, 53, 53, 54, 55, 55, 56, 57, 57, 58, 59, 59, 60, 61, 61, 62, 63, 63, 64, 65, 65, 66, 67, 67, 68, 69, 69, 70, 71, 72, 72, 73, 74, 74, 75, 76, 77, 77, 78, 79, 79, 80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 88, 88, 89, 90, 90, 91, 92, 93, 93, 94, 95, 96, 97, 97, 98, 99, 100, 100, 101, 102, 103, 103, 104, 105, 106, 106, 107, 108, 109, 110, 110, 111, 112, 113, 113, 114, 115, 116, 117, 117, 118, 119, 120, 120, 121, 122, 123, 124, 124, 125, 126, 127};
